{"name":"Rozu","tagline":"Webhook server","body":"# Rozu\r\n\r\n[![Join the chat at https://gitter.im/avoidwork/rozu](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/avoidwork/rozu?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\nRozu is a webhook API server, using MongoDB for persistent storage & Redis for pub/sub of inbound events\r\n\r\n![demo graphic](https://cldup.com/yCd_d6AL58.png \"rozu demo\")\r\n\r\n[![build status](https://secure.travis-ci.org/avoidwork/rozu.svg)](http://travis-ci.org/avoidwork/rozu)\r\n\r\nEach response will include a `Link` header, and an `Array` of `Objects` with `IANA` defined `rel` properties & URIs.\r\n\r\n## Receiving webhook events\r\nRozu has a publically accessible route `/receive` which will accept a JSON or form encoded payload & put it into **Redis**\r\nfor pub/sub behavior in your local stack. Inbound requests must include a user supplied token (`token` in `config.json`)\r\nwhich maps to a registered webhook; tokens are v1 UUIDs.\r\n\r\nInbound events will be published with a channel name of `config.id_webhook.name`, e.g. \"rozu_github\".\r\n\r\n## Sending webhook events\r\nSending a webhook is as easy as publishing into Redis with a channel name of `config.id_webhook.name_send`,\r\ne.g. \"rozu_github_send\", or POST to `/send` after authenticating at `/login`. Outbound webhook properties to configure\r\nthe request are `uri`, & `encoding`. If not specified `encoding` will default to `json`. The value of `encoding` can be\r\n`json`, `querystring`, or `form`. The request body will contain the webhook id as the value of `config.token`, for\r\nvalidation.\r\n\r\nCustom headers for outbound webhooks are supported by specifying a `headers` value (an Object is expected).\r\n\r\nSending an outbound webhook from Redis may look like this:\r\n\r\n```javascript\r\nclientPublish.publish(\"rozu_github_send\", serialize({\"token\": \"bb8bf370-0a54-11e5-9c1d-9389475d0a28\", \"message\": \"Hello World!\"}));\r\n```\r\n\r\n## Requirements\r\n- node.js or io.js\r\n- MongoDB (persistent storage of accounts, & webhook configurations)\r\n- Redis (pub/sub for local stack of inbound events)\r\n- (Optional) nginx for SSL termination, & reverse proxy\r\n\r\n## How do I run Rozu?\r\n`Rozu` can be up and running in 3 steps! When run in a production environment, it's recommended that you use `nginx`\r\nto terminate SSL, and reverse proxy to `Rozu`. Using a daemon like `upstart` (on Linux) to run `rozu` is ideal.\r\n\r\n1.  Clone [this](https://github.com/avoidwork/rozu) repository, or install from `npm`:\r\n    1.  `$ npm install rozu`\r\n    2.  `$ ln -s node_modules/rozu/config.json config.json`\r\n    3.  `$ ln -s node_modules/rozu/lib/app.js app.js`\r\n2.  Edit `config.json` to configure your email server, etc.\r\n3.  Run via `node app.js`\r\n\r\n#### Upstart\r\nUse the provided upstart recipe: `sudo cp node_modules/rozu/rozu.conf /etc/init; service start rozu`\r\n\r\n#### Systemd\r\nUse the provided systemd service: `sudo cp node_modules/rozu/rozu.service /etc/systemd/system; systemctl enable rozu & systemctl start rozu`\r\n\r\n#### What about Windows?\r\nYou need to have Visual Studio Community Edition (or higher) installed, because some dependencies must compile.\r\n\r\n## Getting Started\r\nThe following steps outline how the system is intended to be utilized.\r\n\r\n- Register an account\r\n- Verify account\r\n- Login with account\r\n- Create a webhook by registering the remote host\r\n\r\n\r\n## Registration\r\nTo register, make a `GET` request to `/register` to retrieve instructions.\r\n\r\nRegistration is a two step process, requiring email verification. Please fill out `email` in `config.json`.\r\n\r\n## Authentication\r\nTo authenticate, make a `GET` request to `/login` to retrieve instructions.\r\n\r\nTo logout, make a `GET` request to `/logout`.\r\n\r\n## Your Profile\r\nMake a `GET` request to `/profile`. You will have CRUD operations, defined by the `allow` header.\r\n\r\n## Getting Administrator Access\r\nOnce authenticated, make `GET` request to `/admin`; this requires your account email address in the `admin` Array in `config.json`.\r\n\r\n## Routes\r\nA `GET` request to `/` will return different results, depending upon the state of your session.\r\n\r\n### Unauthenticated\r\n\r\n```json\r\n{\r\n\t\"data\": [\r\n\t\t\"login\",\r\n\t\t\"receive\",\r\n\t\t\"register\"\r\n\t],\r\n\t\"error\": null,\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/login\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/receive\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/register\"\r\n\t\t}\r\n\t],\r\n\t\"status\": 200\r\n}\r\n```\r\n\r\n### Authenticated\r\n\r\n```json\r\n{\r\n\t\"data\": [\r\n\t\t\"admin\",\r\n\t\t\"logout\",\r\n\t\t\"profile\",\r\n\t\t\"receive\",\r\n\t\t\"send\",\r\n\t\t\"stream\",\r\n\t\t\"users\",\r\n\t\t\"webhooks\"\r\n\t],\r\n\t\"error\": null,\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/admin\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/logout\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/profile\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/receive\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/send\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/stream\"\r\n\t\t}\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/users\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"rel\": \"item\",\r\n\t\t\t\"uri\": \"/webhooks\"\r\n\t\t}\r\n\t],\r\n\t\"status\": 200\r\n}\r\n```\r\n\r\n## License\r\nCopyright (c) 2015 Jason Mulligan  \r\nAll Rights Reserved\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}